<?php

namespace Tests\Unit;

use App\services\VentaService;
use Carbon\Carbon;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class VentaServiceTest extends TestCase
{
    use DatabaseMigrations;


    private $service;
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = new VentaService();

    }
    public function testVentas()
    {
        factory(\App\Socio::class)->create();
        factory(\App\Socio::class)->create();
        factory(\App\Socio::class)->create();

        factory(\App\Clase::class)->create();
        factory(\App\Clase::class)->create();
        factory(\App\Clase::class)->create();

        factory(\App\Articulo::class)->create();
        factory(\App\Articulo::class)->create();
        factory(\App\Articulo::class)->create();

        factory(\App\Venta::class)->create(['id_socio' => 1, 'id_vendible' => 1]);
        factory(\App\Venta::class)->create(['id_socio' => 1, 'id_vendible' => 2]);
        factory(\App\Venta::class)->create(['id_socio' => 1, 'id_vendible' => 3]);
        factory(\App\Venta::class)->create(['id_socio' => 1, 'id_vendible' => 4]);
        factory(\App\Venta::class)->create(['id_socio' => 1, 'id_vendible' => 5]);
        factory(\App\Venta::class)->create(['id_socio' => 1, 'id_vendible' => 6]);

        factory(\App\Venta::class)->create(['id_socio' => 2, 'id_vendible' => 1]);
        factory(\App\Venta::class)->create(['id_socio' => 2, 'id_vendible' => 2]);
        factory(\App\Venta::class)->create(['id_socio' => 2, 'id_vendible' => 3]);
        factory(\App\Venta::class)->create(['id_socio' => 2, 'id_vendible' => 4]);
        factory(\App\Venta::class)->create(['id_socio' => 2, 'id_vendible' => 5]);
        factory(\App\Venta::class)->create(['id_socio' => 2, 'id_vendible' => 6]);

        factory(\App\Venta::class)->create(['id_socio' => 3, 'id_vendible' => 1]);
        factory(\App\Venta::class)->create(['id_socio' => 3, 'id_vendible' => 2]);
        factory(\App\Venta::class)->create(['id_socio' => 3, 'id_vendible' => 3]);
        factory(\App\Venta::class)->create(['id_socio' => 3, 'id_vendible' => 4]);
        factory(\App\Venta::class)->create(['id_socio' => 3, 'id_vendible' => 5]);
        factory(\App\Venta::class)->create(['id_socio' => 3, 'id_vendible' => 6]);

        $ventas = $this->service->ventas('2017-02-04', Carbon::today()->toDateString());

        $this->assertEquals($ventas->count(), 18);

    }
}
